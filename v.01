import os
import hashlib
import hmac
import random
import string
from base64 import b64encode, b64decode
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import dh, ec
from cryptography.hazmat.primitives.asymmetric import utils


class APICrypto:

    def __init__(self, secret_key):
        self.secret_key = secret_key.encode()
        self.backend = default_backend()

    def _generate_key(self, salt):
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt.encode(),
            iterations=100000,
            backend=self.backend
        )
        return kdf.derive(self.secret_key)

    def encrypt(self, plaintext):
        iv = os.urandom(16)
        salt = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        key = self._generate_key(salt)
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=self.backend)
        encryptor = cipher.encryptor()
        ciphertext = encryptor.update(plaintext.encode()) + encryptor.finalize()
        mac = hmac.new(key, msg=ciphertext, digestmod=hashlib.sha256).digest()
        return b64encode(iv + salt.encode() + ciphertext + mac).decode()

    def decrypt(self, ciphertext):
        ciphertext = b64decode(ciphertext.encode())
        iv = ciphertext[:16]
        salt = ciphertext[16:32].decode()
        ciphertext = ciphertext[32:-32]
        mac = ciphertext[-32:]
        key = self._generate_key(salt)
        if hmac.compare_digest(mac, hmac.new(key, msg=ciphertext, digestmod=hashlib.sha256).digest()):
            cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=self.backend)
            decryptor = cipher.decryptor()
            return decryptor.update(ciphertext) + decryptor.finalize()
        else:
            raise ValueError("MAC verification failed")
    
    def generate_dh_key_pair(self):
        parameters = dh.generate_parameters(generator=2, key_size=2048, backend=self.backend)
        private_key = parameters.generate_private_key()
        public_key = private_key.public_key()
        return private_key, public_key

    def generate_ec_key_pair(self):
        private_key = ec.generate_private_key(ec.SECP256R1(), backend=self.backend)
        public_key = private_key.public_key()
        return private_key, public_key

    def generate_shared_key(self, private_key, public_key):
        shared_key = private_key.exchange(ec.ECDH(), public_key)
        return shared_key
